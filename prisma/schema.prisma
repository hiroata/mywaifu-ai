// Prismaスキーマ定義

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User (ユーザー)
model User {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String?
  hashedPassword    String
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              String    @default("user")
  
  // 関連テーブル
  accounts          Account[]
  characters        Character[]
  conversations     Conversation[]
  subscriptions     Subscription[]
  customCharacters  CustomCharacter[]
  galleryImages     GalleryImage[]
  characterContents CharacterContent[]
  contentLikes      ContentLike[]
  contentComments   ContentComment[]
}

// Account (OAuth連携アカウント)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Character (AIキャラクター - システム提供)
model Character {
  id                String    @id @default(cuid())
  name              String
  description       String    
  shortDescription  String?   
  age               Int?
  gender            String
  type              String    // "real" or "anime"
  personality       String    
  profileImageUrl   String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isPublic          Boolean   @default(true)
  
  // 関連テーブル
  users             User[]    // お気に入りした/利用したユーザー
  conversations     Conversation[]
  characterImages   CharacterImage[]
  characterVoices   CharacterVoice[]
  tags              Tag[]
  contents          CharacterContent[]
}

// CustomCharacter (ユーザー作成キャラクター)
model CustomCharacter {
  id                String    @id @default(cuid())
  userId            String    // 作成者
  name              String
  description       String    
  shortDescription  String?   
  age               Int?
  gender            String
  type              String    // "real" or "anime"
  personality       String    
  profileImageUrl   String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  isPublic          Boolean   @default(false)
  
  // 関連テーブル
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations     Conversation[]
  characterImages   CustomCharacterImage[]
  characterVoices   CustomCharacterVoice[]
  tags              Tag[]
  contents          CharacterContent[]
}

// Conversation (チャット会話)
model Conversation {
  id                String    @id @default(cuid())
  userId            String
  characterId       String?
  customCharacterId String?
  title             String    @default("New Conversation")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // 関連テーブル
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character         Character? @relation(fields: [characterId], references: [id], onDelete: SetNull)
  customCharacter   CustomCharacter? @relation(fields: [customCharacterId], references: [id], onDelete: SetNull)
  messages          Message[]
  relationship      Relationship?
}

// Message (チャットメッセージ)
model Message {
  id                String    @id @default(cuid())
  conversationId    String
  content           String    
  role              String    // "user" or "assistant"
  hasImage          Boolean   @default(false)
  imageUrl          String?
  hasVoice          Boolean   @default(false)
  voiceUrl          String?
  aiProvider        String?   // "openai" or "xai"
  createdAt         DateTime  @default(now())
  
  // 関連テーブル
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

// Relationship (キャラクターとの関係設定)
model Relationship {
  id                String    @id @default(cuid())
  conversationId    String    @unique
  details           String    
  loveLevel         Int       @default(0)
  mood              String    @default("friendly")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // 関連テーブル
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

// Subscription (サブスクリプション)
model Subscription {
  id                String    @id @default(cuid())
  userId            String
  stripeCustomerId  String?
  stripePriceId     String?
  stripeSubscriptionId String?
  status            String    // "active", "canceled", "past_due"
  plan              String    // "free", "premium", "ultimate"
  currentPeriodStart DateTime?
  currentPeriodEnd  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // 関連テーブル
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// その他必要なテーブル
model Tag {
  id                String    @id @default(cuid())
  name              String    @unique
  
  // 関連テーブル
  characters        Character[]
  customCharacters  CustomCharacter[]
}

model CharacterImage {
  id                String    @id @default(cuid())
  characterId       String
  imageUrl          String
  isProfileImage    Boolean   @default(false)
  type              String    // "default", "casual", "swimsuit", etc.
  
  // 関連テーブル
  character         Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model CustomCharacterImage {
  id                String    @id @default(cuid())
  customCharacterId String
  imageUrl          String
  isProfileImage    Boolean   @default(false)
  type              String    // "default", "casual", "swimsuit", etc.
  
  // 関連テーブル
  customCharacter   CustomCharacter @relation(fields: [customCharacterId], references: [id], onDelete: Cascade)
}

model GalleryImage {
  id                String    @id @default(cuid())
  userId            String
  imageUrl          String
  prompt            String?   
  isPublic          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  
  // 関連テーブル
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CharacterVoice {
  id                String    @id @default(cuid())
  characterId       String
  voiceId           String    // ElevenLabs Voice ID
  sampleUrl         String
  
  // 関連テーブル
  character         Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
}

model CustomCharacterVoice {
  id                String    @id @default(cuid())
  customCharacterId String
  voiceId           String    // ElevenLabs Voice ID
  sampleUrl         String
  
  // 関連テーブル
  customCharacter   CustomCharacter @relation(fields: [customCharacterId], references: [id], onDelete: Cascade)
}

// CharacterContent (キャラクターコンテンツ)
model CharacterContent {
  id                String    @id @default(cuid())
  title             String
  description       String
  contentType       String    // "story", "image", "video"
  contentUrl        String?   // 画像や動画のURL
  storyContent      String?   // 小説/ストーリーのテキスト
  characterId       String?
  customCharacterId String?
  userId            String
  isPublic          Boolean   @default(true)
  likes             Int       @default(0)
  views             Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // 関連テーブル
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character         Character? @relation(fields: [characterId], references: [id], onDelete: SetNull)
  customCharacter   CustomCharacter? @relation(fields: [customCharacterId], references: [id], onDelete: SetNull)
  comments          ContentComment[]
  contentTags       ContentTag[]
  contentLikes      ContentLike[]
}

// ContentComment (コンテンツへのコメント)
model ContentComment {
  id                String    @id @default(cuid())
  contentId         String
  userId            String
  comment           String
  createdAt         DateTime  @default(now())
  
  // 関連テーブル
  content           CharacterContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ContentTag (コンテンツのタグ)
model ContentTag {
  id                String    @id @default(cuid())
  name              String
  contentId         String
  
  // 関連テーブル
  content           CharacterContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  @@unique([name, contentId])
}

// ContentLike (コンテンツのいいね)
model ContentLike {
  userId            String
  contentId         String
  createdAt         DateTime  @default(now())
  
  // 関連テーブル
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  content           CharacterContent @relation(fields: [contentId], references: [id], onDelete: Cascade)
  
  // 複合主キー
  @@id([userId, contentId])
}
